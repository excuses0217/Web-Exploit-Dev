from flask import Flask, request, redirect, make_response
import sqlite3
import os
from itsdangerous import URLSafeSerializer, BadSignature

app = Flask(__name__)
app.secret_key = os.urandom(24)
serializer = URLSafeSerializer(app.secret_key)

def init_db():
    db_path = 'app.db'
    if os.path.exists(db_path):
        os.remove(db_path)
    conn = sqlite3.connect(db_path)
    c = conn.cursor()
    c.execute('CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT)')
    c.execute('CREATE TABLE comments (id INTEGER PRIMARY KEY, username TEXT, comment TEXT)')
    conn.commit()
    conn.close()

@app.route('/register', methods=['GET', 'POST'])
def register():
    error = ''
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        conn = sqlite3.connect('app.db')
        c = conn.cursor()
        try:
            c.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, password))
            conn.commit()
        except sqlite3.IntegrityError:
            error = 'Username already taken.'
        finally:
            conn.close()
        if not error:
            return redirect('/login')
    return '''
    <form method="post">
        Username: <input type="text" name="username"><br>
        Password: <input type="password" name="password"><br>
        <input type="submit" value="Register">
    </form>
    <p style="color:red;">{error}</p>
    <p>Already have an account? <a href="/login">Login here</a></p>
    '''.format(error=error)

@app.route('/login', methods=['GET', 'POST'])
def login():
    error = ''
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        conn = sqlite3.connect('app.db')
        c = conn.cursor()
        c.execute('SELECT * FROM users WHERE username = ? AND password = ?', (username, password))
        user = c.fetchone()
        conn.close()
        if user:
            response = redirect('/')
            cookie_value = serializer.dumps(username)
            response.set_cookie('auth', value=cookie_value)
            return response
        else:
            error = 'Invalid username or password.'
    return '''
    <form method="post">
        Username: <input type="text" name="username"><br>
        Password: <input type="password" name="password"><br>
        <input type="submit" value="Login">
    </form>
    <p style="color:red;">{error}</p>
    <p>New user? <a href="/register">Register here</a></p>
    '''.format(error=error)

@app.route('/', methods=['GET'])
def index():
    comments_html = ''
    conn = sqlite3.connect('app.db')
    c = conn.cursor()
    for comment in c.execute('SELECT username, comment FROM comments'):
        comments_html += f"<p><a href='/detail?username={comment[0]}'>{comment[0]}</a>: {comment[1]}</p>"
    conn.close()
    try:
        username = serializer.loads(request.cookies.get('auth', ''))
    except BadSignature:
        response = make_response(redirect('/login'))
        response.set_cookie('auth', '', expires=0)
        return response
    login_or_logout = "<p><a href='/login'>Login</a> or <a href='/register'>Register</a> to post comments.</p>" if not username else "<p>Logged in as " + username + ". <a href='/logout'>Logout</a></p>"
    return f'''
    {login_or_logout}
    <form method="post" action="/comment">
        <textarea name="comment"></textarea><br>
        <input type="submit" value="Post Comment">
    </form>
    {comments_html}
    '''

@app.route('/detail')
def detail():
    username = request.args.get('username')
    if not username:
        return 'Invalid request, username is missing.'
    comments_html = f"<h1>Here is {username}'s comments:</h1>"
    conn = sqlite3.connect('app.db')
    c = conn.cursor()
    c.execute('SELECT comment FROM comments WHERE username = ?', (username,))
    comments = c.fetchall()
    for comment in comments:
        comments_html += f"<p>{comment[0]}</p>"
    conn.close()
    return f'''
    {comments_html}
    <p><a href="/">Back to Home</a></p>
    '''

@app.route('/comment', methods=['POST'])
def comment():
    try:
        username = serializer.loads(request.cookies.get('auth', ''))
    except BadSignature:
        return redirect('/login')
    comment = request.form['comment']
    conn = sqlite3.connect('app.db')
    c = conn.cursor()
    c.execute('INSERT INTO comments (username, comment) VALUES (?, ?)', (username, comment))
    conn.commit()
    conn.close()
    return redirect('/')

@app.route('/logout')
def logout():
    response = make_response(redirect('/'))
    response.set_cookie('auth', '', expires=0)
    return response

if __name__ == '__main__':
    init_db()
    app.run(debug=True)